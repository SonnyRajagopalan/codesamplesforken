/*
 * Java code generated by beanGenerator.py
 * 02.19.2016
 * Sonny Rajagopalan/Pacifi, Inc.
 * Copyright, Pacifi, Inc.
 *
 * A class for describing app handles for an Hola account.
 */
package com.hola.serverSide.ariApplication.db.beans;
/*
 * Import statements 
 */
import java.util.List;
import java.io.IOException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;

/*
 * Hola! specific
 */

public class AccountHandles
{
	private String usernameOrEmail; // The username or email that is used to login to the Hola! system.
	private int    extension; // The integer extension number that the user is assigned to.
	private String handles; // The JSON string of the handles for this Hola! account.
	private static final ObjectMapper objectMapper = new ObjectMapper ();



	/*
	 * Constructors
	 * Empty/default (see 
	 *   http://stackoverflow.com/questions/7625783/jsonmappingexception-no-suitable-constructor-found-for-type-simple-type-class
	 * full, and partial (for derived classes)
	 *
	 */
	public AccountHandles ()
	{
	   // For Jackson ObjectMapper's sanity!
	}
	public AccountHandles (String _usernameOrEmail, int _extension, String _handles)
	{
		this.usernameOrEmail = _usernameOrEmail;
		this.extension       = _extension;
		this.handles         = _handles;
	}
	/*
	 * Setters
	 */
	@JsonProperty ("usernameOrEmail")
	public void setUsernameOrEmail (String _usernameOrEmail)
	{
		this.usernameOrEmail = _usernameOrEmail;
	}


	@JsonProperty ("extension")
	public void setExtension (int _extension)
	{
		this.extension = _extension;
	}


	@JsonProperty ("handles")
	public void setHandles (String _handles)
	{
		this.handles = _handles;
	}


	/*
	 * Getters
	 */
	@JsonProperty ("usernameOrEmail")
	public String getUsernameOrEmail ()
	{
		return this.usernameOrEmail;
	}


	@JsonProperty ("extension")
	public int getExtension ()
	{
		return this.extension;
	}


	@JsonProperty ("handles")
	public String getHandles ()
	{
		return this.handles;
	}

    public List <HandleStatus> getHandleStatusesAsList ()
    {
   	try
   	    {
   		List <HandleStatus> handleStatusesJsonList = 
		    objectMapper.readValue (this.handles, new TypeReference<List <HandleStatus>> () {});

   		return handleStatusesJsonList;
   	    }
   	catch (IOException e)
   	    {
   		e.printStackTrace ();
		return null;
   	    }
    }

   public boolean getStatusForApp (String app)
    {
	
	for (HandleStatus handleStatus: getHandleStatusesAsList ())
	    {
		if (handleStatus.getApp ().toLowerCase ().equals (app.toLowerCase ()))
		    {
			return handleStatus.getStatus ();
		    }
	    }
	return false;
    }

   public String getHandleForApp (String app)
    {
	
	for (HandleStatus handleStatus: getHandleStatusesAsList ())
	    {
		//System.out.println (handleStatus.toJsonString ());
		if (handleStatus.getApp ().toLowerCase ().equals (app.toLowerCase ()))
		    {
			return handleStatus.getHandle ();
		    }
	    }
	return "";
    }

    public boolean hasHandle (String handle)
    {
	for (HandleStatus handleStatus: getHandleStatusesAsList ())
	    {
		if (handleStatus.getHandle ().equals (handle))
		    {
			return true;
		    }
	    }
	return false;	
    }
	/*
	 * Override of toString() to help debug, log etc.
	 */
	@Override
	public String toString ()
	{
		return "usernameOrEmail: " + usernameOrEmail+ " " + "extension: " + extension+ " " + "handles: " + handles;
	}
	/*
	 * get JSON string object
	 */
	public String toJsonString ()
	{
		String thisBeanAsJson = null;
		try
		{
			thisBeanAsJson = objectMapper.writeValueAsString (this);
		}
		catch (JsonProcessingException e)
		{
			e.printStackTrace ();
		}
		finally
		{
			return thisBeanAsJson;
		}
	}
}
