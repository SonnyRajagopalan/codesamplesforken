/*
 * This source code file is the property of Pacifi, Inc.
 * Copyright: 2015-2016.
 * All rights reserved.  
 * 
 * @author: Sonny Rajagopalan
 * @copyright: Pacifi, Inc.
 */
package com.hola.serverSide.ariApplication.ari;
/*
 * Java code generated by apiGenerator.py
 * 10.17.2015
 * Sonny Rajagopalan/Pacifi, Inc.
 * Copyright, Pacifi, Inc.
 *
 * The Bridges ARI API. See https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Bridges+REST+API for details.
 */

import com.sun.jersey.api.client.ClientResponse;
/*
 * Logging
*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BridgesARIAPI
{
	// Logging
	private static final Logger log = LoggerFactory.getLogger (BridgesARIAPI.class.getName ());
	/**
	 *
	 * list: List all active bridges in Asterisk.
	 *
	*/
	public static ClientResponse list ()
	{
		String RESTURLToUse = "/bridges";

		ClientResponse httpResponse = HTTPAPIForARI.get (RESTURLToUse);
		if (httpResponse.getStatus () == 200)
		{
			log.debug ("No errors caught in call to /bridges");
		}
		return httpResponse;
	}

	/**
	 *
	 * create: Create a new bridge. This bridge persists until it has been shut down, or Asterisk has been shut down.
	 *
	 *
	 * Query parameters:
	 * @param type: String: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media).
	 * @param bridgeId: String: Unique ID to give to the bridge being created.
	 * @param name: String: Name to give to the bridge being created.
	*/
	public static ClientResponse create (String query)
	{
		String RESTURLToUse = "/bridges";

		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 200)
		{
			log.debug ("No errors caught in call to /bridges");
		}
		return httpResponse;
	}

	/**
	 *
	 * createWithId: Create a new bridge or updates an existing one. This bridge persists until it has been shut down, or Asterisk has been shut down.
	 *
	 *
	 * Query parameters:
	 * @param type: String: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media) to set.
	 * @param name: String: Set the name of the bridge.
	 *
	 * Path parameters:
	 * @param bridgeId: String: Unique ID to give to the bridge being created.
	*/
	public static ClientResponse createWithId (String bridgeId, String query)
	{
		String RESTURLToUse = "/bridges/{bridgeId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 200)
		{
			log.debug ("No errors caught in call to /bridges/{bridgeId}");
		}
		return httpResponse;
	}

	/**
	 *
	 * get: Get bridge details.
	 *
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Bridge not found
	*/
	public static ClientResponse get (String bridgeId)
	{
		String RESTURLToUse = "/bridges/{bridgeId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.get (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * destroy: Shut down a bridge. If any channels are in this bridge, they will be removed and resume whatever they were doing beforehand.
	 *
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Bridge not found
	*/
	public static ClientResponse destroy (String bridgeId)
	{
		String RESTURLToUse = "/bridges/{bridgeId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * addChannel: Add a channel to a bridge.
	 *
	 *
	 * Query parameters:
	 * @param channel: String: (Required) Ids of channels to add to bridge
	 * @param role: String: Channel's role in the bridge
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Channel not found
	 * HTTP Error code 404: Bridge not found
	 * HTTP Error code 409: Bridge not in Stasis application; Channel currently recording
	 * HTTP Error code 422: Channel not in Stasis application
	*/
	public static ClientResponse addChannel (String bridgeId, String query)
	{
		String RESTURLToUse = "/bridges/{bridgeId}/addChannel";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Bridge not in Stasis application; Channel currently recording");
		}
		if (httpResponse.getStatus () == 422)
		{
			log.error ("Channel not in Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * removeChannel: Remove a channel from a bridge.
	 *
	 *
	 * Query parameters:
	 * @param channel: String: (Required) Ids of channels to remove from bridge
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Channel not found
	 * HTTP Error code 404: Bridge not found
	 * HTTP Error code 409: Bridge not in Stasis application
	 * HTTP Error code 422: Channel not in this bridge
	*/
	public static ClientResponse removeChannel (String bridgeId, String query)
	{
		String RESTURLToUse = "/bridges/{bridgeId}/removeChannel";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Bridge not in Stasis application");
		}
		if (httpResponse.getStatus () == 422)
		{
			log.error ("Channel not in this bridge");
		}
		return httpResponse;
	}

	/**
	 *
	 * startMoh: Play music on hold to a bridge or change the MOH class that is playing.
	 *
	 *
	 * Query parameters:
	 * @param mohClass: String: Channel's id
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Bridge not found
	 * HTTP Error code 409: Bridge not in Stasis application
	*/
	public static ClientResponse startMoh (String bridgeId, String query)
	{
		String RESTURLToUse = "/bridges/{bridgeId}/moh";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Bridge not in Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * stopMoh: Stop playing music on hold to a bridge. This will only stop music on hold being played via POST bridges/{bridgeId}/moh.
	 *
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Bridge not found
	 * HTTP Error code 409: Bridge not in Stasis application
	*/
	public static ClientResponse stopMoh (String bridgeId)
	{
		String RESTURLToUse = "/bridges/{bridgeId}/moh";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Bridge not in Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * play: Start playback of media on a bridge. The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone:URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
	 *
	 *
	 * Query parameters:
	 * @param media: String: (Required) Media's URI to play.
	 * @param lang: String: For sounds, selects language for sound.
	 * @param offsetms: int: Number of media to skip before playing. Allowed range
	 * @param skipms: int: Number of milliseconds to skip for forward/reverse operations. Default
	 * @param playbackId: String: Playback Id.
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Bridge not found
	 * HTTP Error code 409: Bridge not in a Stasis application
	*/
	public static ClientResponse play (String bridgeId, String query)
	{
		String RESTURLToUse = "/bridges/{bridgeId}/play";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Bridge not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * playWithId: Start playback of media on a bridge. The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone:URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
	 *
	 *
	 * Query parameters:
	 * @param media: String: (Required) Media's URI to play.
	 * @param lang: String: For sounds, selects language for sound.
	 * @param offsetms: int: Number of media to skip before playing. Allowed range
	 * @param skipms: int: Number of milliseconds to skip for forward/reverse operations. Default
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 * @param playbackId: String: Playback ID.
	 *
	 * Errors caught:
	 * HTTP Error code 404: Bridge not found
	 * HTTP Error code 409: Bridge not in a Stasis application
	*/
	public static ClientResponse playWithId (String bridgeId, String playbackId, String query)
	{
		String RESTURLToUse = "/bridges/{bridgeId}/play/{playbackId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		RESTURLToUse = RESTURLToUse.replace ("{playbackId}", playbackId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Bridge not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * record: Start a recording. This records the mixed audio from all channels participating in this bridge.
	 *
	 *
	 * Query parameters:
	 * @param name: String: (Required) Recording's filename
	 * @param format: String: (Required) Format to encode audio in
	 * @param maxDurationSeconds: int: Maximum duration of the recording, in seconds. 0 for no limit. Allowed range
	 * @param maxSilenceSeconds: int: Maximum duration of silence, in seconds. 0 for no limit. Allowed range
	 * @param ifExists: String: Action to take if a recording with the same name already exists. Default
	 * @param beep: boolean: Play beep when recording begins
	 * @param terminateOn: String: DTMF input to terminate recording. Default
	 *
	 * Path parameters:
	 * @param bridgeId: String: Bridge's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Invalid parameters
	 * HTTP Error code 404: Bridge not found
	 * HTTP Error code 409: Bridge is not in a Stasis application; A recording with the same name already exists on the system and can not be overwritten because it is in progress or ifExists=fail
	 * HTTP Error code 422: The format specified is unknown on this system
	*/
	public static ClientResponse record (String bridgeId, String query)
	{
		String RESTURLToUse = "/bridges/{bridgeId}/record";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{bridgeId}", bridgeId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Invalid parameters");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Bridge not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Bridge is not in a Stasis application; A recording with the same name already exists on the system and can not be overwritten because it is in progress or ifExists=fail");
		}
		if (httpResponse.getStatus () == 422)
		{
			log.error ("The format specified is unknown on this system");
		}
		return httpResponse;
	}

}
