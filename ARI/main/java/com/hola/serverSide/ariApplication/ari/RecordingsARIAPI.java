/*
 * This source code file is the property of Pacifi, Inc.
 * Copyright: 2015-2016.
 * All rights reserved.  
 * 
 * @author: Sonny Rajagopalan
 * @copyright: Pacifi, Inc.
 */
package com.hola.serverSide.ariApplication.ari;
/*
 * Java code generated by apiGenerator.py
 * 10.17.2015
 * Sonny Rajagopalan/Pacifi, Inc.
 * Copyright, Pacifi, Inc.
 *
 * The Recordings ARI API. See https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Recordings+REST+API for details.
 */

import com.sun.jersey.api.client.ClientResponse;
/*
 * Logging
*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RecordingsARIAPI
{
	// Logging
	private static final Logger log = LoggerFactory.getLogger (RecordingsARIAPI.class.getName ());
	/**
	 *
	 * listStored: List recordings that are complete.
	 *
	*/
	public static ClientResponse listStored ()
	{
		String RESTURLToUse = "/recordings/stored";

		ClientResponse httpResponse = HTTPAPIForARI.get (RESTURLToUse);
		if (httpResponse.getStatus () == 200)
		{
			log.debug ("No errors caught in call to /recordings/stored");
		}
		return httpResponse;
	}

	/**
	 *
	 * getStored: Get a stored recording's details.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	*/
	public static ClientResponse getStored (String recordingName)
	{
		String RESTURLToUse = "/recordings/stored/{recordingName}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.get (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * deleteStored: Delete a stored recording.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	*/
	public static ClientResponse deleteStored (String recordingName)
	{
		String RESTURLToUse = "/recordings/stored/{recordingName}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * copyStored: Copy a stored recording.
	 *
	 *
	 * Query parameters:
	 * @param destinationRecordingName: String: (Required) The destination name of the recording
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording to copy
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	 * HTTP Error code 409: A recording with the same name already exists on the system
	*/
	public static ClientResponse copyStored (String recordingName, String query)
	{
		String RESTURLToUse = "/recordings/stored/{recordingName}/copy";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("A recording with the same name already exists on the system");
		}
		return httpResponse;
	}

	/**
	 *
	 * getLive: List live recordings.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	*/
	public static ClientResponse getLive (String recordingName)
	{
		String RESTURLToUse = "/recordings/live/{recordingName}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.get (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * cancel: Stop a live recording and discard it.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	*/
	public static ClientResponse cancel (String recordingName)
	{
		String RESTURLToUse = "/recordings/live/{recordingName}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * stop: Stop a live recording and store it.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	*/
	public static ClientResponse stop (String recordingName)
	{
		String RESTURLToUse = "/recordings/live/{recordingName}/stop";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * pause: Pause a live recording. Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	 * HTTP Error code 409: Recording not in session
	*/
	public static ClientResponse pause (String recordingName)
	{
		String RESTURLToUse = "/recordings/live/{recordingName}/pause";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Recording not in session");
		}
		return httpResponse;
	}

	/**
	 *
	 * unpause: Unpause a live recording.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	 * HTTP Error code 409: Recording not in session
	*/
	public static ClientResponse unpause (String recordingName)
	{
		String RESTURLToUse = "/recordings/live/{recordingName}/pause";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Recording not in session");
		}
		return httpResponse;
	}

	/**
	 *
	 * mute: Mute a live recording. Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	 * HTTP Error code 409: Recording not in session
	*/
	public static ClientResponse mute (String recordingName)
	{
		String RESTURLToUse = "/recordings/live/{recordingName}/mute";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Recording not in session");
		}
		return httpResponse;
	}

	/**
	 *
	 * unmute: Unmute a live recording.
	 *
	 *
	 * Path parameters:
	 * @param recordingName: String: The name of the recording
	 *
	 * Errors caught:
	 * HTTP Error code 404: Recording not found
	 * HTTP Error code 409: Recording not in session
	*/
	public static ClientResponse unmute (String recordingName)
	{
		String RESTURLToUse = "/recordings/live/{recordingName}/mute";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{recordingName}", recordingName);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Recording not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Recording not in session");
		}
		return httpResponse;
	}

}
