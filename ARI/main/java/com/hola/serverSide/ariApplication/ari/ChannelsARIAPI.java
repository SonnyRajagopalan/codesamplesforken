/*
 * This source code file is the property of Pacifi, Inc.
 * Copyright: 2015-2016.
 * All rights reserved.  
 * 
 * @author: Sonny Rajagopalan
 * @copyright: Pacifi, Inc.
 */
package com.hola.serverSide.ariApplication.ari;
/*
 * Java code generated by apiGenerator.py
 * 10.17.2015
 * Sonny Rajagopalan/Pacifi, Inc.
 * Copyright, Pacifi, Inc.
 *
 * The Channels ARI API. See https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Channels+REST+API for details.
 */

import com.sun.jersey.api.client.ClientResponse;
/*
 * Logging
*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.hola.serverSide.ariApplication.common.ThreadUtils;

public class ChannelsARIAPI
{
	// Logging
	private static final Logger log = LoggerFactory.getLogger (ChannelsARIAPI.class.getName ());
	/**
	 *
	 * list: List all active channels in Asterisk.
	 *
	*/
	public static ClientResponse list ()
	{
		String RESTURLToUse = "/channels";

		ClientResponse httpResponse = HTTPAPIForARI.get (RESTURLToUse);
		if (httpResponse.getStatus () == 200)
		{
			log.debug ("No errors caught in call to /channels");
		}
		return httpResponse;
	}

	/**
	 *
	 * originate: Create a new channel (originate). The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
	 *
	 *
	 * Query parameters:
	 * @param endpoint: String: (Required) Endpoint to call.
	 * @param extension: String: The extension to dial after the endpoint answers. Mutually exclusive with 'app'.
	 * @param context: String: The context to dial after the endpoint answers. If omitted, uses 'default'. Mutually exclusive with 'app'.
	 * @param priority: long: The priority to dial after the endpoint answers. If omitted, uses 1. Mutually exclusive with 'app'.
	 * @param label: String: The label to dial after the endpoint answers. Will supersede 'priority' if provided. Mutually exclusive with 'app'.
	 * @param app: String: The application that is subscribed to the originated channel. When the channel is answered, it will be passed to this Stasis application. Mutually exclusive with 'context', 'extension', 'priority', and 'label'.
	 * @param appArgs: String: The application arguments to pass to the Stasis application provided by 'app'. Mutually exclusive with 'context', 'extension', 'priority', and 'label'.
	 * @param callerId: String: CallerID to use when dialing the endpoint or extension.
	 * @param timeout: int: Timeout (in seconds) before giving up dialing, or 
	 * @param channelId: String: The unique id to assign the channel on creation.
	 * @param otherChannelId: String: The unique id to assign the second channel when using local channels.
	 * @param originator: String: The unique id of the channel which is originating this one.
	 *
	 * Body parameters:
	 * @param variables: containers: The "variables" key in the body object holds variable key/value pairs to set on the channel on creation. Other keys in the body object are interpreted as query parameters. Ex. { "endpoint"
	 *
	 * Errors caught:
	 * HTTP Error code 400: Invalid parameters for originating a channel.
	*/
    public static ClientResponse originate (String query, String body)
	{
		String RESTURLToUse = "/channels";
		ClientResponse httpResponse = null;

		if (body.equals (""))
		    {
			httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		    }
		else
		    {
			System.out.println ("Posting originate with body = " + body);
			httpResponse = HTTPAPIForARI.post (RESTURLToUse, query, body);
		    }
		    
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Invalid parameters for originating a channel.");
		}
		return httpResponse;
	}

	/**
	 *
	 * get: Channel details.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	*/
	public static ClientResponse get (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.get (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * originateWithId: Create a new channel (originate with id). The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
	 *
	 *
	 * Query parameters:
	 * @param endpoint: String: (Required) Endpoint to call.
	 * @param extension: String: The extension to dial after the endpoint answers. Mutually exclusive with 'app'.
	 * @param context: String: The context to dial after the endpoint answers. If omitted, uses 'default'. Mutually exclusive with 'app'.
	 * @param priority: long: The priority to dial after the endpoint answers. If omitted, uses 1. Mutually exclusive with 'app'.
	 * @param label: String: The label to dial after the endpoint answers. Will supersede 'priority' if provided. Mutually exclusive with 'app'.
	 * @param app: String: The application that is subscribed to the originated channel. When the channel is answered, it will be passed to this Stasis application. Mutually exclusive with 'context', 'extension', 'priority', and 'label'.
	 * @param appArgs: String: The application arguments to pass to the Stasis application provided by 'app'. Mutually exclusive with 'context', 'extension', 'priority', and 'label'.
	 * @param callerId: String: CallerID to use when dialing the endpoint or extension.
	 * @param timeout: int: Timeout (in seconds) before giving up dialing, or 
	 * @param otherChannelId: String: The unique id to assign the second channel when using local channels.
	 * @param originator: String: The unique id of the channel which is originating this one.
	 *
	 * Body parameters:
	 * @param variables: containers: The "variables" key in the body object holds variable key/value pairs to set on the channel on creation. Other keys in the body object are interpreted as query parameters. Ex. { "endpoint"
	 *
	 * Path parameters:
	 * @param channelId: String: The unique id to assign the channel on creation.
	 *
	 * Errors caught:
	 * HTTP Error code 400: Invalid parameters for originating a channel.
	*/
    public static ClientResponse originateWithId (String channelId, String query, String body)
	{
		String RESTURLToUse = "/channels/{channelId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);

		ClientResponse httpResponse = null;

		if (body.equals (""))
		    {
			httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		    }
		else
		    {
			System.out.println ("Posting originate with body = " + body);
			httpResponse = HTTPAPIForARI.post (RESTURLToUse, query, body);
		    }
		//ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);

		if (httpResponse.getStatus () == 400)
		{
			log.error ("Invalid parameters for originating a channel.");
		}
		return httpResponse;
	}

	/**
	 *
	 * hangup: Delete (i.e. hangup) a channel.
	 *
	 *
	 * Query parameters:
	 * @param reason: String: Reason for hanging up the channel. Allowed values--normal, busy, congestion, no_answer
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Invalid reason for hangup provided
	 * HTTP Error code 404: Channel not found
	*/
	public static ClientResponse hangup (String channelId, String query)
	{
	    log.debug (ThreadUtils.getThreadIDedStackTraceString ());
		String RESTURLToUse = "/channels/{channelId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Invalid reason for hangup provided");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * continueInDialplan: Exit application; continue execution in the dialplan.
	 *
	 *
	 * Query parameters:
	 * @param context: String: The context to continue to.
	 * @param extension: String: The extension to continue to.
	 * @param priority: int: The priority to continue to.
	 * @param label: String: The label to continue to
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse continueInDialplan (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/continue";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * redirect: Redirect the channel to a different location.
	 *
	 *
	 * Query parameters:
	 * @param endpoint: String: (Required) The endpoint to redirect the channel to
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Endpoint parameter not provided
	 * HTTP Error code 404: Channel or endpoint not found
	 * HTTP Error code 409: Channel not in a Stasis application
	 * HTTP Error code 422: Endpoint is not the same type as the channel
	*/
	public static ClientResponse redirect (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/redirect";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Endpoint parameter not provided");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel or endpoint not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		if (httpResponse.getStatus () == 422)
		{
			log.error ("Endpoint is not the same type as the channel");
		}
		return httpResponse;
	}

	/**
	 *
	 * answer: Answer a channel.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse answer (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}/answer";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * ring: Indicate ringing to a channel.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse ring (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}/ring";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		log.debug (RESTURLToUse);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * ringStop: Stop ringing indication on a channel if locally generated.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse ringStop (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}/ring";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * sendDTMF: Send provided DTMF to a given channel.
	 *
	 *
	 * Query parameters:
	 * @param dtmf: String: DTMF To send.
	 * @param before: int: Amount of time to wait before DTMF digits (specified in milliseconds) start.
	 * @param between: int: Amount of time in between DTMF digits (specified in milliseconds). Default--100
	 * @param duration: int: Length of each DTMF digit (specified in milliseconds). Default--100
	 * @param after: int: Amount of time to wait after DTMF digits (specified in milliseconds) end.
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: DTMF is required
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse sendDTMF (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/dtmf";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("DTMF is required");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * mute: Mute a channel.
	 *
	 *
	 * Query parameters:
	 * @param direction: String: Direction in which to mute audio. Default--both. Allowed values--both, in, out
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse mute (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/mute";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * unmute: Unmute a channel.
	 *
	 *
	 * Query parameters:
	 * @param direction: String: Direction in which to unmute audio. Default--both. Allowed values--both, in, out
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse unmute (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/mute";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * hold: Hold a channel.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse hold (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}/hold";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * unhold: Remove a channel from hold.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse unhold (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}/hold";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * startMoh: Play music on hold to a channel. Using media operations such as /play on a channel playing MOH in this manner will suspend MOH without resuming automatically. If continuing music on hold is desired, the stasis application must reinitiate music on hold.
	 *
	 *
	 * Query parameters:
	 * @param mohClass: String: Music on hold class to use
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse startMoh (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/moh";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * stopMoh: Stop playing music on hold to a channel.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse stopMoh (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}/moh";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * startSilence: Play silence to a channel. Using media operations such as /play on a channel playing silence in this manner will suspend silence without resuming automatically.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse startSilence (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}/silence";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * stopSilence: Stop playing silence to a channel.
	 *
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse stopSilence (String channelId)
	{
		String RESTURLToUse = "/channels/{channelId}/silence";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.delete (RESTURLToUse);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * play: Start playback of media. The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone:URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
	 *
	 *
	 * Query parameters:
	 * @param media: String: (Required) Media's URI to play.
	 * @param lang: String: For sounds, selects language for sound.
	 * @param offsetms: int: Number of media to skip before playing.
	 * @param skipms: int: Number of milliseconds to skip for forward/reverse operations. Default--3000
	 * @param playbackId: String: Playback ID.
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse play (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/play";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * playWithId: Start playback of media and specify the playbackId. The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone:URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
	 *
	 *
	 * Query parameters:
	 * @param media: String: (Required) Media's URI to play.
	 * @param lang: String: For sounds, selects language for sound.
	 * @param offsetms: int: Number of media to skip before playing.
	 * @param skipms: int: Number of milliseconds to skip for forward/reverse operations. Default--3000
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 * @param playbackId: String: Playback ID.
	 *
	 * Errors caught:
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse playWithId (String channelId, String playbackId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/play/{playbackId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		RESTURLToUse = RESTURLToUse.replace ("{playbackId}", playbackId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * record: Start a recording. Record audio from a channel. Note that this will not capture audio sent to the channel. The bridge itself has a record feature if that's what you want.
	 *
	 *
	 * Query parameters:
	 * @param name: String: (Required) Recording's filename
	 * @param format: String: (Required) Format to encode audio in
	 * @param maxDurationSeconds: int: Maximum duration of the recording, in seconds. 0 for no limit
	 * @param Allowed range: Min: 0; Max
	 * @param maxSilenceSeconds: int: Maximum duration of silence, in seconds. 0 for no limit
	 * @param Allowed range: Min: 0; Max
	 * @param ifExists: String: Action to take if a recording with the same name already exists. Default--fail. Allowed values--fail, overwrite, append
	 * @param beep: boolean: Play beep when recording begins
	 * @param terminateOn: String: DTMF input to terminate recording. Default--none. Allowed values--none, any, *, #
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Invalid parameters
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel is not in a Stasis application; the channel is currently bridged with other hcannels; A recording with the same name already exists on the system and can not be overwritten because it is in progress or ifExists=fail
	 * HTTP Error code 422: The format specified is unknown on this system
	*/
	public static ClientResponse record (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/record";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Invalid parameters");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel is not in a Stasis application; the channel is currently bridged with other hcannels; A recording with the same name already exists on the system and can not be overwritten because it is in progress or ifExists=fail");
		}
		if (httpResponse.getStatus () == 422)
		{
			log.error ("The format specified is unknown on this system");
		}
		return httpResponse;
	}

	/**
	 *
	 * getChannelVar: Get the value of a channel variable or function.
	 *
	 *
	 * Query parameters:
	 * @param variable: String: (Required) The channel variable or function to get
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Missing variable parameter.
	 * HTTP Error code 404: Channel or variable not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse getChannelVar (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/variable";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.get (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Missing variable parameter.");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel or variable not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * setChannelVar: Set the value of a channel variable or function.
	 *
	 *
	 * Query parameters:
	 * @param variable: String: (Required) The channel variable or function to set
	 * @param value: String: The value to set the variable to
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Missing variable parameter.
	 * HTTP Error code 404: Channel not found
	 * HTTP Error code 409: Channel not in a Stasis application
	*/
	public static ClientResponse setChannelVar (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/variable";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Missing variable parameter.");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		if (httpResponse.getStatus () == 409)
		{
			log.error ("Channel not in a Stasis application");
		}
		return httpResponse;
	}

	/**
	 *
	 * snoopChannel: Start snooping. Snoop (spy/whisper) on a specific channel.
	 *
	 *
	 * Query parameters:
	 * @param spy: String: Direction of audio to spy on. Default--none. Allowed values--none, both, out, in
	 * @param whisper: String: Direction of audio to whisper into. Default--none. Allowed values--none, both, out, in
	 * @param app: String: (Required) Application the snooping channel is placed into
	 * @param appArgs: String: The application arguments to pass to the Stasis application
	 * @param snoopId: String: Unique ID to assign to snooping channel
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 *
	 * Errors caught:
	 * HTTP Error code 400: Invalid parameters
	 * HTTP Error code 404: Channel not found
	*/
	public static ClientResponse snoopChannel (String channelId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/snoop";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Invalid parameters");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		return httpResponse;
	}

	/**
	 *
	 * snoopChannelWithId: Start snooping. Snoop (spy/whisper) on a specific channel.
	 *
	 *
	 * Query parameters:
	 * @param spy: String: Direction of audio to spy on. Default--none. Allowed values--none, both, out, in
	 * @param whisper: String: Direction of audio to whisper into. Default--none. Allowed values--none, both, out, in
	 * @param app: String: (Required) Application the snooping channel is placed into
	 * @param appArgs: String: The application arguments to pass to the Stasis application
	 *
	 * Path parameters:
	 * @param channelId: String: Channel's id
	 * @param snoopId: String: Unique ID to assign to snooping channel
	 *
	 * Errors caught:
	 * HTTP Error code 400: Invalid parameters
	 * HTTP Error code 404: Channel not found
	*/
	public static ClientResponse snoopChannelWithId (String channelId, String snoopId, String query)
	{
		String RESTURLToUse = "/channels/{channelId}/snoop/{snoopId}";

		// Correct URI using path params
		RESTURLToUse = RESTURLToUse.replace ("{channelId}", channelId);
		RESTURLToUse = RESTURLToUse.replace ("{snoopId}", snoopId);
		ClientResponse httpResponse = HTTPAPIForARI.post (RESTURLToUse, query);
		if (httpResponse.getStatus () == 400)
		{
			log.error ("Invalid parameters");
		}
		if (httpResponse.getStatus () == 404)
		{
			log.error ("Channel not found");
		}
		return httpResponse;
	}

}
