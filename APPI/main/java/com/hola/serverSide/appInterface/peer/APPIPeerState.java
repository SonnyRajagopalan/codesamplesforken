/*
 * Java code autogenerated by beanGenerator.py
 * 12.29.2015
 * Sonny Rajagopalan/Pacifi, Inc.
 * Copyright, Pacifi, Inc.
 *
 * The APPI peer state information.
 */
package com.hola.serverSide.appInterface.peer;
/*
 * Import statements 
 */
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.HashMap;
//import java.util.LinkedHashMap;
import javax.websocket.Session;
/*
  Logging
*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/*
  Hola specific
*/
import com.hola.serverSide.appInterface.appi.APPIEvent;
import com.hola.serverSide.appInterface.hsm.HSMBaseState;
import com.hola.serverSide.appInterface.hsm.HSMIdleState;
import com.hola.serverSide.appInterface.hsm.HSMEvent;
import com.hola.serverSide.appInterface.common.SessionTokenUtils;

public class APPIPeerState
{
    // Logging
    private static final Logger log = LoggerFactory.getLogger (APPIPeerState.class.getName ());

    private volatile String                                 UUID; // The UUID of this session.
    private volatile APPIPeer                               peer; // The APPI peer information for the session.
    private volatile APPIPeerStats                          stats; // The statistics for the peer.
    private volatile Session                                session; // The java.websocket.Session object for the peer.
    private volatile HSMBaseState                           currentState; // The current state of the peer.
    private volatile HSMEvent                               lastHSMEvent; // The last HSMEvent recorded for the peer.

    private volatile static HashMap <String, APPIPeerState> peerStateDB = new HashMap <String, APPIPeerState> ();

    public synchronized static void removeAPeerFromDB (String UUID)
    {
	peerStateDB.remove (UUID);
    }

    public synchronized static APPIPeerState getPeerStateFromUUID (String UUID)
    {
	log.debug ("Will get peer state for UUID {} from peerStateDB which is of size {}", UUID, peerStateDB.size ());
	
	Iterator peerStateIterator = peerStateDB.entrySet ().iterator ();
	while (peerStateIterator.hasNext ())
	    {
		Map.Entry peerStateEntry = (Map.Entry) peerStateIterator.next ();
		APPIPeerState peerState = (APPIPeerState) peerStateEntry.getValue ();
		log.debug ("This peerState object's UUID = {} and session ID = {}", 
			  peerState.getUUID (), peerState.getSession ().getId ());

	    }
	//Return UUID;
	return peerStateDB.get (UUID);
    }

    public synchronized static List <APPIPeerState> getPeerStateFromUsernameOrEmail (String usernameOrEmail)
    {
	// Use http://docs.oracle.com/javaee/7/api/javax/websocket/Session.html#getId--
	// USE ITERATOR!!!!
	List <APPIPeerState> allPeerStatesForThisUsernameOrEmail = new ArrayList <APPIPeerState> ();
	Iterator peerStateIterator = peerStateDB.entrySet ().iterator ();
	while (peerStateIterator.hasNext ())
	    {
		Map.Entry peerStateEntry = (Map.Entry) peerStateIterator.next ();
		APPIPeerState peerState = (APPIPeerState) peerStateEntry.getValue ();
		
		if (peerState != null)
		    {
			log.debug ("Peer state is not null");
			if (peerState.getPeer () != null)
			    {
				log.debug ("Peer state does contain a peer....");
				if (peerState.getPeer ().getUsernameOrEmail () != null)
				    {
					if (peerState.getPeer ().getUsernameOrEmail ().equals (usernameOrEmail))
					    {
						allPeerStatesForThisUsernameOrEmail.add (peerState);
					    }
				    }
				else
				    {
					log.debug ("Peer state's usernameOrEmail is null!");
				    }
			    }
			else
			    {
				log.error ("Peer state DOES NOT CONTAIN a peer");
			    }
		    }
		else
		    {
			log.debug ("Peer usernameOrEmail is null");
		    }
	    }
	return allPeerStatesForThisUsernameOrEmail;
    }

    public synchronized static String getPeerStateUUIDFromSession (Session session)
    {
	// Use http://docs.oracle.com/javaee/7/api/javax/websocket/Session.html#getId--
	// USE ITERATOR!!!!
	String UUID=null;
	Iterator peerStateIterator = peerStateDB.entrySet ().iterator ();
	while (peerStateIterator.hasNext ())
	    {
		Map.Entry peerStateEntry = (Map.Entry) peerStateIterator.next ();
		APPIPeerState peerState = (APPIPeerState) peerStateEntry.getValue ();

		if (peerState.getSession () != null)
		    {
			if (peerState.getSession ().getId ().equals (session.getId ()))
			    {
				UUID = peerState.getUUID ();
			    }
		    }
		else
		    {
			log.error ("Peer state does not contain a session!");
		    }
	    }
	return UUID;
    }

    public synchronized static APPIPeerState getPeerStateFromSession (Session session)
    {
	// Use http://docs.oracle.com/javaee/7/api/javax/websocket/Session.html#getId--
	// USE ITERATOR!!!!
	Iterator peerStateIterator = peerStateDB.entrySet ().iterator ();
	while (peerStateIterator.hasNext ())
	    {
		Map.Entry peerStateEntry = (Map.Entry) peerStateIterator.next ();
		APPIPeerState peerState = (APPIPeerState) peerStateEntry.getValue ();

		if (peerState.getSession () != null)
		    {
			if (peerState.getSession ().getId ().equals (session.getId ()))
			    {
				return peerState;
			    }
		    }
		else
		    {
			log.error ("Peer state does not contain a session!");
		    }
	    }
	return null;
    }

    /*
     * Constructors
     * Empty/default (see 
     *   http://stackoverflow.com/questions/7625783/jsonmappingexception-no-suitable-constructor-found-for-type-simple-type-class
     * full, and partial (for derived classes)
     *
     */
    public APPIPeerState ()
    {
	this.UUID         = SessionTokenUtils.getARandomUUID ();
	this.peer         = new APPIPeer ();
	this.peer.setUUID (this.UUID);

	this.stats        = new APPIPeerStats ();
	this.stats.setUUID (this.UUID);

	this.session      = null;
	this.currentState = HSMIdleState.getInstance ();
	this.lastHSMEvent = HSMEvent.ReceivedAuthRequest;

	peerStateDB.put (this.UUID, this);
    }
    /*
     * Setters
     */
    public void setUUID (String _UUID)
    {
	this.UUID = _UUID;
    }


    public void setPeer (APPIPeer _peer)
    {
	this.peer = _peer;
    }


    public void setStats (APPIPeerStats _stats)
    {
	this.stats = _stats;
    }


    public void setSession (Session _session)
    {
	this.session = _session;
    }


    public void setCurrentState (HSMBaseState _currentState)
    {
	this.currentState = _currentState;
    }


    public void setLastHSMEvent (HSMEvent _lastHSMEvent)
    {
	this.lastHSMEvent = _lastHSMEvent;
    }


    /*
     * Getters
     */
    public String getUUID ()
    {
	return this.UUID;
    }


    public APPIPeer getPeer ()
    {
	return this.peer;
    }


    public APPIPeerStats getStats ()
    {
	return this.stats;
    }


    public Session getSession ()
    {
	return this.session;
    }


    public HSMBaseState getCurrentState ()
    {
	return this.currentState;
    }


    public HSMEvent getLastHSMEvent ()
    {
	return this.lastHSMEvent;
    }

    /*
      Other HSMBaseState related methods
     */
    public synchronized void changeState (HSMBaseState newState)
    {
	this.currentState = newState;
    }

    public void processReceivedAPPIEvent (APPIPeerStats peerState, APPIEvent event)
    {
	log.debug ("Event processing for event {}", event.getType ());
	currentState.processReceivedAPPIEvent (this, event);
    }

    public void processReceivedAuthRequest (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processReceivedAuthRequest (this, event);
    }

    public void processAndSendFailedAuthResponse (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processAndSendFailedAuthResponse (this, event);
    }    

    public void processAndSendSuccessAuthResponse (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processAndSendSuccessAuthResponse (this, event);
    }

    public void processFailedAuthRequest (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processFailedAuthRequest (this, event);
    }

    public void processReceivedInfoRequest (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processReceivedInfoRequest (this, event);
    }

    public void processReceivedContactAddRequest (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processReceivedContactAddRequest (this, event);
    }

    public void processSendReachabilityUpdate (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processSendReachabilityUpdate (this, event);
    }

    public void processReceivedStatusUpdate (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processReceivedStatusUpdate (this, event);
    }

    public void processReceivedReachabilityRequest (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processReceivedReachabilityRequest (this, event);
    }

    public void processReceivedGoingToBackground (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processReceivedGoingToBackground (this, event);
    }

    public void processReceivedGoingToForeground (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {} in state {}", Thread.currentThread ().getId (), this.UUID, 
		  event.getType (), currentState.getStateName ());
	currentState.processReceivedGoingToForeground (this, event);
    }

    public void processReceivedCurrentCallRequest (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processReceivedCurrentCallRequest (this, event);
    }

    public void processSuccess (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processSuccess (this, event);
    }

    public void processCleanUp (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processCleanUp (this, event);
    }

    public void processError (APPIEvent event)
    {
	log.debug ("[Thread_{}] Peer {} processing event {}", Thread.currentThread ().getId (), this.UUID, event.getType ());
	currentState.processError (this, event);
    }

    /*
     * Overide of toString() to help debug, log etc.
     */
    @Override
    public String toString ()
    {
	return "UUID: " + UUID+ " " + "peer: " + peer.toString ()+ " " + "stats: " + 
	    stats.toString ()+ " " + "session: " + session+ " " + "currentState: " + currentState+ " " + 
	    "lastHSMEvent: " + lastHSMEvent;
    }
}
