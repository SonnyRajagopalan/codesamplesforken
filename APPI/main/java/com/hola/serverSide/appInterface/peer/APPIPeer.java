/*
 * Java code generated by beanGenerator.py
 * 02.27.2016
 * Sonny Rajagopalan/Pacifi, Inc.
 * Copyright, Pacifi, Inc.
 *
 * The APPI peer.
 */
package com.hola.serverSide.appInterface.peer;
/*
 * Import statements 
 */
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.annotation.JsonProperty;

public class APPIPeer
{
    private String        UUID; // The UUID of the APPIPeerState associated with this peer.
    private String        usernameOrEmail; // The username or email that the peer used to log in.
    private String        ipAddress; // Public IPv4 address of the peer (app).
    private Device        device; // The device information for the peer (on which the app is running).
    private LocalDateTime start; // The start timestamp of this session.
    private static final ObjectMapper objectMapper = new ObjectMapper ();



    /*
     * Constructors
     * Empty/default (see 
     *   http://stackoverflow.com/questions/7625783/jsonmappingexception-no-suitable-constructor-found-for-type-simple-type-class
     * full, and partial (for derived classes)
     *
     */
    public APPIPeer ()
    {
	// For Jackson ObjectMapper's sanity!
    }
    public APPIPeer (String _UUID, String _usernameOrEmail, String _ipAddress)
    {	
	this.UUID            = _UUID;
	this.usernameOrEmail = _usernameOrEmail;
	this.ipAddress       = _ipAddress;
	this.device          = new Device ();
	this.start           = LocalDateTime.now ();
    }
    /*
     * Setters
     */
    @JsonProperty ("UUID")
    public void setUUID (String _UUID)
    {
	this.UUID = _UUID;
    }


    @JsonProperty ("usernameOrEmail")
    public void setUsernameOrEmail (String _usernameOrEmail)
    {
	this.usernameOrEmail = _usernameOrEmail;
    }


    @JsonProperty ("ipAddress")
    public void setIpAddress (String _ipAddress)
    {
	this.ipAddress = _ipAddress;
    }


    @JsonProperty ("device")
    public void setDevice (Device _device)
    {
	this.device = _device;
    }


    @JsonProperty ("start")
    public void setStart (LocalDateTime _start)
    {
	this.start = _start;
    }


    /*
     * Getters
     */
    @JsonProperty ("UUID")
    public String getUUID ()
    {
	return this.UUID;
    }


    @JsonProperty ("usernameOrEmail")
    public String getUsernameOrEmail ()
    {
	return this.usernameOrEmail;
    }


    @JsonProperty ("ipAddress")
    public String getIpAddress ()
    {
	return this.ipAddress;
    }


    @JsonProperty ("device")
    public Device getDevice ()
    {
	return this.device;
    }


    @JsonProperty ("start")
    public LocalDateTime getStart ()
    {
	return this.start;
    }

    public long getDurationSoFar (LocalDateTime _ts)
    {
	return ChronoUnit.MINUTES.between(this.start, _ts);
    }
    /*
     * Override of toString() to help debug, log etc.
     */
    @Override
    public String toString ()
    {
	return "UUID: " + UUID+ " " + "usernameOrEmail: " + usernameOrEmail+ " " + "ipAddress: " + ipAddress+ " " + "device: " + device+ " " + "start: " + start;
    }
    /*
     * get JSON string object
     */
    public String toJsonString ()
    {
	String thisBeanAsJson = null;
	try
	    {
		thisBeanAsJson = objectMapper.writeValueAsString (this);
	    }
	catch (JsonProcessingException e)
	    {
		e.printStackTrace ();
	    }
	finally
	    {
		return thisBeanAsJson;
	    }
    }
}
