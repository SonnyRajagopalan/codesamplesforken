/*
 * Java code generated by beanGenerator.py
 * 01.22.2016
 * Sonny Rajagopalan/Pacifi, Inc.
 * Copyright, Pacifi, Inc.
 *
 *  The availability for a callee which is tied to her policy. This information is used along with policies of the callee to compute the actual Live Address Book entries of the callee in the caller's app.
 */
package com.hola.serverSide.appInterface.policy;
/*
 * Import statements 
 */
import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
/*
  Logging
*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Availability
{
    // Logging
    private static final Logger log = LoggerFactory.getLogger (Availability.class.getName ());

    private String device; // The type of device for which this availability holds. The value of "any" signifies the availability (or the lack) on any device.
    private String app; // The type of app this availability holds for, on this device. The value of "any" signifies the availability (or the lack) on any device.
    private String method; // The method of the call that is acceptable on this device and app. Options include


    /*
     * Constructors
     * Empty/default (see 
     *   http://stackoverflow.com/questions/7625783/jsonmappingexception-no-suitable-constructor-found-for-type-simple-type-class
     * full, and partial (for derived classes)
     *
     */
    public Availability ()
    {
	// For Jackson ObjectMapper's sanity!
    }
    public Availability (String _device, String _app, String _method)
    {
	this.device = _device;
	this.app    = _app;
	this.method = _method;
    }
    /*
     * Setters
     */
    public void setDevice (String _device)
    {
	this.device = _device;
    }


    public void setApp (String _app)
    {
	this.app = _app;
    }


    public void setMethod (String _method)
    {
	this.method = _method;
    }


    /*
     * Getters
     */
    public String getDevice ()
    {
	return this.device;
    }


    public String getApp ()
    {
	return this.app;
    }


    public String getMethod ()
    {
	return this.method;
    }


    /*
     * Override of toString() to help debug, log etc.
     */
    @Override
    public String toString ()
    {
	return "device: " + device+ " " + "app: " + app+ " " + "method: " + method;
    }
    /*
     * get JSON string object
     */
    public String toJsonString ()
    {
	ObjectMapper mapper = new ObjectMapper ();
	String thisBeanAsJson = null;
	try
	    {
		thisBeanAsJson = mapper.writeValueAsString (this);
	    }
	catch (JsonProcessingException e)
	    {
		e.printStackTrace ();
	    }
	finally
	    {
		return thisBeanAsJson;
	    }
    }

    public void print ()
    {
	log.debug ("\t\tDevice: " + device + ", app: " + app + ", method: " + method);
    }

    public static List <Availability> expandAnyDeviceAvailability (Availability a)
    {
	List <Availability> expandedAvailabilities = new ArrayList <Availability> ();
	Availability a1 = new Availability ("mobile", a.getApp (), a.getMethod ());
	Availability a2 = new Availability ("desktop", a.getApp (), a.getMethod ());

	expandedAvailabilities.add (a1);
	expandedAvailabilities.add (a2);

	return expandedAvailabilities;
    }

    public static List <Availability> expandAnyAppAvailability (Availability a)
    {
	List <Availability> expandedAvailabilities = new ArrayList <Availability> ();
	Availability a1 = new Availability (a.getDevice (), "skype",  a.getMethod ());
	Availability a2 = new Availability (a.getDevice (), "google", a.getMethod ());
	Availability a3 = new Availability (a.getDevice (), "voip",   a.getMethod ());

	expandedAvailabilities.add (a1);
	expandedAvailabilities.add (a2);
	expandedAvailabilities.add (a3);

	return expandedAvailabilities;
    }

    public static List <Availability> expandAnyMethodAvailability (Availability a)
    {
	List <Availability> expandedAvailabilities = new ArrayList <Availability> ();
	Availability a1 = new Availability (a.getDevice (), a.getApp (), "voice");
	Availability a2 = new Availability (a.getDevice (), a.getApp (), "text");
	Availability a3 = new Availability (a.getDevice (), a.getApp (), "video");

	expandedAvailabilities.add (a1);
	expandedAvailabilities.add (a2);
	expandedAvailabilities.add (a3);

	return expandedAvailabilities;
    }

}
